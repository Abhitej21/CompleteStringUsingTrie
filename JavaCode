// JAVA CODE TO FIND THE LONGEST STRING IN THE ARRAY WITH ALL ITS PREFIXES PRESENT IN THE ARRAY.
// USING TRIE CONCEPT, THE COMPLETE STRING IS DERIVED 

import java.util.* ;
import java.io.*; 

//Node class for creating nodes at every insertion of character in trie
 class Node{
//prevEndCount stores the number of prefixes encountered previously
// curEndCount stores the number of prefixes encountered till now
    Node children[];
    boolean isEnd;
    int prevEndCount;
    int curEndCount;
    Node(){
      children = new Node[26];
      isEnd = false;
      prevEndCount = 0;
      curEndCount = 0;
    }
  }

class Trie{
  static Node root;
  Trie(){
    root = new Node();
  }
// INSERTING THE STRING INTO TRIE
  public static void insert(String word,ArrayList<String> al){
      int n= word.length();
      Node cur = root;
      int prev = 0;
      for(int i=0;i<n;i++){
        int c = word.charAt(i)-'a';
        if(cur.children[c]==null){
          cur.children[c] = new Node();
        }
        cur = cur.children[c];
        if(cur.isEnd==true){
          prev++;
        }
      }
      cur.isEnd = true;
      cur.prevEndCount = prev;
      cur.curEndCount = prev+1;
      // System.out.println(word+" "+cur.curEndCount);
      if(prev==word.length()-1){
          al.add(word);
      }
    }
}
class Solution {

  // static Node root;
  // Solution(){
  //   root = new Node();
  // }
    
  

  public static String completeString(int n, String[] a) {
    // Write your code here.
    ArrayList<String> al = new ArrayList<>();
    Trie t = new Trie();
    Arrays.sort(a);
    for(int i=0;i<n;i++){
      t.insert(a[i],al);
    }
    int maxi = 0;
    for(String s: al){
      maxi = Math.max(maxi,s.length());
    }
    ArrayList<String> temp = new ArrayList<>();
    for(String s: al){
      if(s.length()==maxi){
        temp.add(s);
      }
    }
//deriving the lexicographically smaller string if multiple strings of same longest length are present in the array
    Collections.sort(temp);
    if(temp.size()==0)return "None";
    return temp.get(0);

  }
}
